{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// API client with interceptors and token handling\nclass ApiClient {\n  constructor() {\n    this.token = localStorage.getItem('token');\n    this.refreshToken = localStorage.getItem('refreshToken');\n  }\n  async request(endpoint, options = {}) {\n    const url = `${API_URL}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(this.token ? {\n        Authorization: `Bearer ${this.token}`\n      } : {}),\n      ...options.headers\n    };\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n\n      // Handle 401 errors with token refresh\n      if (response.status === 401 && this.refreshToken) {\n        const newToken = await this.refreshToken();\n        if (newToken) {\n          headers.Authorization = `Bearer ${newToken}`;\n          return this.request(endpoint, options);\n        }\n      }\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Request failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n  async refreshToken() {\n    try {\n      const response = await fetch(`${API_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken: this.refreshToken\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      const data = await response.json();\n      this.token = data.token;\n      localStorage.setItem('token', data.token);\n      return data.token;\n    } catch (error) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      return null;\n    }\n  }\n\n  // Auth methods\n  async login(credentials) {\n    const data = await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    this.setTokens(data.token, data.refreshToken);\n    return data;\n  }\n  async loginWithGoogle(token) {\n    const data = await this.request('/auth/google', {\n      method: 'POST',\n      body: JSON.stringify({\n        token\n      })\n    });\n    this.setTokens(data.token, data.refreshToken);\n    return data;\n  }\n  async getUserProfile() {\n    return this.request('/user/profile');\n  }\n  setTokens(token, refreshToken) {\n    this.token = token;\n    this.refreshToken = refreshToken;\n    localStorage.setItem('token', token);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n  clearTokens() {\n    this.token = null;\n    this.refreshToken = null;\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","ApiClient","constructor","token","localStorage","getItem","refreshToken","request","endpoint","options","url","headers","Authorization","response","fetch","status","newToken","ok","error","json","Error","message","console","method","body","JSON","stringify","data","setItem","removeItem","login","credentials","setTokens","loginWithGoogle","getUserProfile","clearTokens","apiClient"],"sources":["C:/Users/linga/QuickCommerce/client/src/services/apiClient.jsx"],"sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\n// API client with interceptors and token handling\r\nclass ApiClient {\r\n  constructor() {\r\n    this.token = localStorage.getItem('token');\r\n    this.refreshToken = localStorage.getItem('refreshToken');\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${API_URL}${endpoint}`;\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...(this.token ? { Authorization: `Bearer ${this.token}` } : {}),\r\n      ...options.headers,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers,\r\n      });\r\n\r\n      // Handle 401 errors with token refresh\r\n      if (response.status === 401 && this.refreshToken) {\r\n        const newToken = await this.refreshToken();\r\n        if (newToken) {\r\n          headers.Authorization = `Bearer ${newToken}`;\r\n          return this.request(endpoint, options);\r\n        }\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || 'Request failed');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async refreshToken() {\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/refresh`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          refreshToken: this.refreshToken,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Token refresh failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      this.token = data.token;\r\n      localStorage.setItem('token', data.token);\r\n      return data.token;\r\n    } catch (error) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('refreshToken');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Auth methods\r\n  async login(credentials) {\r\n    const data = await this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    \r\n    this.setTokens(data.token, data.refreshToken);\r\n    return data;\r\n  }\r\n\r\n  async loginWithGoogle(token) {\r\n    const data = await this.request('/auth/google', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token }),\r\n    });\r\n    \r\n    this.setTokens(data.token, data.refreshToken);\r\n    return data;\r\n  }\r\n\r\n  async getUserProfile() {\r\n    return this.request('/user/profile');\r\n  }\r\n\r\n  setTokens(token, refreshToken) {\r\n    this.token = token;\r\n    this.refreshToken = refreshToken;\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  }\r\n\r\n  clearTokens() {\r\n    this.token = null;\r\n    this.refreshToken = null;\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n  }\r\n}\r\n\r\nexport const apiClient = new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}