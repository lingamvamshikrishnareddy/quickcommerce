{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\linga\\\\QuickCommerce\\\\client\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { refreshTokenApi, loginWithGoogle as loginWithGoogleApi } from '../services/apiClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        await checkAuth();\n      } else {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const response = await refreshTokenApi();\n      if (response.data.user) {\n        setUser(response.data.user);\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || 'Login failed');\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('refreshToken', data.refreshToken);\n      setUser(data.user);\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loginWithGoogleHandler = async () => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await loginWithGoogleApi();\n      localStorage.setItem('token', response.data.token);\n      localStorage.setItem('refreshToken', response.data.refreshToken);\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    setUser(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    loginWithGoogle: loginWithGoogleHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","refreshTokenApi","loginWithGoogle","loginWithGoogleApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initAuth","token","localStorage","getItem","checkAuth","response","data","err","console","logout","login","credentials","fetch","method","headers","body","JSON","stringify","json","ok","Error","message","setItem","refreshToken","loginWithGoogleHandler","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/linga/QuickCommerce/client/src/contexts/AuthContext.jsx"],"sourcesContent":["// src/contexts/AuthContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { refreshTokenApi, loginWithGoogle as loginWithGoogleApi } from '../services/apiClient';\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initAuth = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        await checkAuth();\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    initAuth();\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    try {\r\n      const response = await refreshTokenApi();\r\n      if (response.data.user) {\r\n        setUser(response.data.user);\r\n      }\r\n    } catch (err) {\r\n      console.error('Auth check failed:', err);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) throw new Error(data.message || 'Login failed');\r\n\r\n      localStorage.setItem('token', data.token);\r\n      localStorage.setItem('refreshToken', data.refreshToken);\r\n      setUser(data.user);\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loginWithGoogleHandler = async () => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n      const response = await loginWithGoogleApi();\r\n      localStorage.setItem('token', response.data.token);\r\n      localStorage.setItem('refreshToken', response.data.refreshToken);\r\n      setUser(response.data.user);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    login,\r\n    logout,\r\n    loginWithGoogle: loginWithGoogleHandler,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}