{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\linga\\\\QuickCommerce\\\\client\\\\src\\\\components\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'access_token';\nconst REFRESH_TOKEN_KEY = 'refresh_token';\nconst USER_KEY = 'user';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [refreshToken, setRefreshToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = () => {\n      const storedAccessToken = localStorage.getItem(ACCESS_TOKEN_KEY);\n      const storedRefreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\n      const storedUser = localStorage.getItem(USER_KEY);\n      if (storedAccessToken && storedRefreshToken && storedUser) {\n        setAccessToken(storedAccessToken);\n        setRefreshToken(storedRefreshToken);\n        setUser(JSON.parse(storedUser));\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n\n  // Check if token is expired\n  const isTokenExpired = useCallback(token => {\n    if (!token) return true;\n    try {\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      return decoded.exp < currentTime;\n    } catch (error) {\n      return true;\n    }\n  }, []);\n\n  // Refresh token function\n  const refreshAccessToken = useCallback(async () => {\n    try {\n      if (!refreshToken) throw new Error('No refresh token available');\n      const response = await axios.post('/auth/refresh', {\n        refreshToken\n      });\n      const {\n        accessToken: newAccessToken\n      } = response.data;\n      setAccessToken(newAccessToken);\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\n      return newAccessToken;\n    } catch (error) {\n      // If refresh fails, log out the user\n      logout();\n      throw new Error('Session expired. Please login again.');\n    }\n  }, [refreshToken]);\n\n  // Setup axios interceptors\n  useEffect(() => {\n    // Request interceptor\n    const requestIntercept = api.interceptors.request.use(async config => {\n      if (!accessToken) return config;\n\n      // Check if access token is expired\n      if (isTokenExpired(accessToken)) {\n        const newAccessToken = await refreshAccessToken();\n        config.headers.Authorization = `Bearer ${newAccessToken}`;\n      } else {\n        config.headers.Authorization = `Bearer ${accessToken}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor\n    const responseIntercept = api.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n\n      // If error is 401 and we haven't tried to refresh the token yet\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          const newAccessToken = await refreshAccessToken();\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          return api(originalRequest);\n        } catch (refreshError) {\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n\n    // Cleanup interceptors\n    return () => {\n      api.interceptors.request.eject(requestIntercept);\n      api.interceptors.response.eject(responseIntercept);\n    };\n  }, [accessToken, refreshAccessToken, isTokenExpired]);\n\n  // Login function\n  const login = useCallback(async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        user: userData,\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken\n      } = response.data;\n      setUser(userData);\n      setAccessToken(newAccessToken);\n      setRefreshToken(newRefreshToken);\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\n      localStorage.setItem(REFRESH_TOKEN_KEY, newRefreshToken);\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\n      return userData;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Register function\n  const register = useCallback(async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await api.post('/auth/register', userData);\n      const {\n        user: newUser,\n        accessToken: newAccessToken,\n        refreshToken: newRefreshToken\n      } = response.data;\n      setUser(newUser);\n      setAccessToken(newAccessToken);\n      setRefreshToken(newRefreshToken);\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\n      localStorage.setItem(REFRESH_TOKEN_KEY, newRefreshToken);\n      localStorage.setItem(USER_KEY, JSON.stringify(newUser));\n      return newUser;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      if (refreshToken) {\n        // Notify backend about logout\n        await api.post('/auth/logout', {\n          refreshToken\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local state and storage\n      setUser(null);\n      setAccessToken(null);\n      setRefreshToken(null);\n      localStorage.removeItem(ACCESS_TOKEN_KEY);\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\n      localStorage.removeItem(USER_KEY);\n    }\n  }, [refreshToken]);\n\n  // Reset password request\n  const requestPasswordReset = useCallback(async email => {\n    try {\n      setError(null);\n      setLoading(true);\n      await api.post('/auth/reset-password-request', {\n        email\n      });\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Password reset request failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Reset password with token\n  const resetPassword = useCallback(async (token, newPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n      await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Password reset failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Update user profile\n  const updateProfile = useCallback(async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      const response = await api.put('/auth/profile', userData);\n      const updatedUser = response.data;\n      setUser(updatedUser);\n      localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\n      return updatedUser;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Profile update failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Change password\n  const changePassword = useCallback(async (currentPassword, newPassword) => {\n    try {\n      setError(null);\n      setLoading(true);\n      await api.post('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Password change failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const value = {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    requestPasswordReset,\n    resetPassword,\n    updateProfile,\n    changePassword,\n    api // Expose configured axios instance\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"iPYna3xN4oPb14oXjhoGGIHlNTo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Export the API instance for use in other parts of the application\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { api };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useCallback","useEffect","useState","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","api","create","baseURL","process","env","REACT_APP_API_URL","headers","ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","USER_KEY","AuthProvider","children","_s","user","setUser","accessToken","setAccessToken","refreshToken","setRefreshToken","loading","setLoading","error","setError","initializeAuth","storedAccessToken","localStorage","getItem","storedRefreshToken","storedUser","JSON","parse","isTokenExpired","token","decoded","currentTime","Date","now","exp","refreshAccessToken","Error","response","post","newAccessToken","data","setItem","logout","requestIntercept","interceptors","request","use","config","Authorization","Promise","reject","responseIntercept","_error$response","originalRequest","status","_retry","refreshError","eject","login","email","password","userData","newRefreshToken","stringify","err","_err$response","_err$response$data","message","register","newUser","_err$response2","_err$response2$data","console","removeItem","requestPasswordReset","_err$response3","_err$response3$data","resetPassword","newPassword","_err$response4","_err$response4$data","updateProfile","put","updatedUser","_err$response5","_err$response5$data","changePassword","currentPassword","_err$response6","_err$response6$data","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/linga/QuickCommerce/client/src/components/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// Create auth context\r\nconst AuthContext = createContext(null);\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Token storage keys\r\nconst ACCESS_TOKEN_KEY = 'access_token';\r\nconst REFRESH_TOKEN_KEY = 'refresh_token';\r\nconst USER_KEY = 'user';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [refreshToken, setRefreshToken] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize auth state from localStorage\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      const storedAccessToken = localStorage.getItem(ACCESS_TOKEN_KEY);\r\n      const storedRefreshToken = localStorage.getItem(REFRESH_TOKEN_KEY);\r\n      const storedUser = localStorage.getItem(USER_KEY);\r\n\r\n      if (storedAccessToken && storedRefreshToken && storedUser) {\r\n        setAccessToken(storedAccessToken);\r\n        setRefreshToken(storedRefreshToken);\r\n        setUser(JSON.parse(storedUser));\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Check if token is expired\r\n  const isTokenExpired = useCallback((token) => {\r\n    if (!token) return true;\r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n      return decoded.exp < currentTime;\r\n    } catch (error) {\r\n      return true;\r\n    }\r\n  }, []);\r\n\r\n  // Refresh token function\r\n  const refreshAccessToken = useCallback(async () => {\r\n    try {\r\n      if (!refreshToken) throw new Error('No refresh token available');\r\n\r\n      const response = await axios.post('/auth/refresh', {\r\n        refreshToken,\r\n      });\r\n\r\n      const { accessToken: newAccessToken } = response.data;\r\n\r\n      setAccessToken(newAccessToken);\r\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\r\n\r\n      return newAccessToken;\r\n    } catch (error) {\r\n      // If refresh fails, log out the user\r\n      logout();\r\n      throw new Error('Session expired. Please login again.');\r\n    }\r\n  }, [refreshToken]);\r\n\r\n  // Setup axios interceptors\r\n  useEffect(() => {\r\n    // Request interceptor\r\n    const requestIntercept = api.interceptors.request.use(\r\n      async (config) => {\r\n        if (!accessToken) return config;\r\n\r\n        // Check if access token is expired\r\n        if (isTokenExpired(accessToken)) {\r\n          const newAccessToken = await refreshAccessToken();\r\n          config.headers.Authorization = `Bearer ${newAccessToken}`;\r\n        } else {\r\n          config.headers.Authorization = `Bearer ${accessToken}`;\r\n        }\r\n\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor\r\n    const responseIntercept = api.interceptors.response.use(\r\n      (response) => response,\r\n      async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // If error is 401 and we haven't tried to refresh the token yet\r\n        if (error.response?.status === 401 && !originalRequest._retry) {\r\n          originalRequest._retry = true;\r\n\r\n          try {\r\n            const newAccessToken = await refreshAccessToken();\r\n            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n            return api(originalRequest);\r\n          } catch (refreshError) {\r\n            return Promise.reject(refreshError);\r\n          }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Cleanup interceptors\r\n    return () => {\r\n      api.interceptors.request.eject(requestIntercept);\r\n      api.interceptors.response.eject(responseIntercept);\r\n    };\r\n  }, [accessToken, refreshAccessToken, isTokenExpired]);\r\n\r\n  // Login function\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      const response = await api.post('/auth/login', {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      const { user: userData, accessToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\r\n\r\n      setUser(userData);\r\n      setAccessToken(newAccessToken);\r\n      setRefreshToken(newRefreshToken);\r\n\r\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\r\n      localStorage.setItem(REFRESH_TOKEN_KEY, newRefreshToken);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n\r\n      return userData;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Login failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Register function\r\n  const register = useCallback(async (userData) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      const response = await api.post('/auth/register', userData);\r\n\r\n      const { user: newUser, accessToken: newAccessToken, refreshToken: newRefreshToken } = response.data;\r\n\r\n      setUser(newUser);\r\n      setAccessToken(newAccessToken);\r\n      setRefreshToken(newRefreshToken);\r\n\r\n      localStorage.setItem(ACCESS_TOKEN_KEY, newAccessToken);\r\n      localStorage.setItem(REFRESH_TOKEN_KEY, newRefreshToken);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(newUser));\r\n\r\n      return newUser;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Registration failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Logout function\r\n  const logout = useCallback(async () => {\r\n    try {\r\n      if (refreshToken) {\r\n        // Notify backend about logout\r\n        await api.post('/auth/logout', {\r\n          refreshToken,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      // Clear local state and storage\r\n      setUser(null);\r\n      setAccessToken(null);\r\n      setRefreshToken(null);\r\n      localStorage.removeItem(ACCESS_TOKEN_KEY);\r\n      localStorage.removeItem(REFRESH_TOKEN_KEY);\r\n      localStorage.removeItem(USER_KEY);\r\n    }\r\n  }, [refreshToken]);\r\n\r\n  // Reset password request\r\n  const requestPasswordReset = useCallback(async (email) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      await api.post('/auth/reset-password-request', {\r\n        email,\r\n      });\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Password reset request failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Reset password with token\r\n  const resetPassword = useCallback(async (token, newPassword) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      await api.post('/auth/reset-password', {\r\n        token,\r\n        newPassword,\r\n      });\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Password reset failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Update user profile\r\n  const updateProfile = useCallback(async (userData) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      const response = await api.put('/auth/profile', userData);\r\n      const updatedUser = response.data;\r\n\r\n      setUser(updatedUser);\r\n      localStorage.setItem(USER_KEY, JSON.stringify(updatedUser));\r\n\r\n      return updatedUser;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Profile update failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Change password\r\n  const changePassword = useCallback(async (currentPassword, newPassword) => {\r\n    try {\r\n      setError(null);\r\n      setLoading(true);\r\n\r\n      await api.post('/auth/change-password', {\r\n        currentPassword,\r\n        newPassword,\r\n      });\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Password change failed');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    error,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    register,\r\n    logout,\r\n    requestPasswordReset,\r\n    resetPassword,\r\n    updateProfile,\r\n    changePassword,\r\n    api, // Expose configured axios instance\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Export the API instance for use in other parts of the application\r\nexport { api };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}